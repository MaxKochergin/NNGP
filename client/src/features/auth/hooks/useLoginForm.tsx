// client/src/features/auth/hooks/useLoginForm.ts
import { yupResolver } from '@hookform/resolvers/yup';
import { useForm } from 'react-hook-form';
import { useDispatch, useSelector } from 'react-redux';
import { useNavigate } from 'react-router-dom';
import * as yup from 'yup';
import { AppDispatch, RootState } from '../../../app/store';
import { mockLogin, selectMockError, selectMockIsLoading } from '../mockAuthSlice';

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è mock –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const loginSchema = yup.object({
  email: yup.string().email('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').required('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'),
  password: yup
    .string()
    .required('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    .min(3, '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞'),
});

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
export type LoginFormInputs = {
  email: string;
  password: string;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getDefaultRouteByRole = (role: string): string => {
  switch (role) {
    case 'admin':
      return '/app/admin/panel';
    case 'hr':
      return '/app/hr/profile';
    case 'employer':
      return '/app/employer/profile';
    case 'candidate':
      return '/app/candidate/profile';
    default:
      return '/';
  }
};

export const useLoginForm = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch<AppDispatch>();

  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ mock auth slice
  const isLoading = useSelector(selectMockIsLoading);
  const error = useSelector(selectMockError);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è React Hook Form —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π Yup
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<LoginFormInputs>({
    resolver: yupResolver(loginSchema),
    defaultValues: {
      email: '',
      password: '',
    },
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const onSubmit = async (data: LoginFormInputs) => {
    try {
      console.log('üîê –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:', { email: data.email });

      const result = await dispatch(mockLogin(data)).unwrap();

      console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
      console.log('üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω:', !!result.token);
      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', result.user);

      if (result.user) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        const redirectRoute = getDefaultRouteByRole(result.user.role);
        console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞:', redirectRoute);

        navigate(redirectRoute); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
    }
  };

  return {
    register,
    handleSubmit,
    errors,
    onSubmit,
    isLoading,
    error,
  };
};
