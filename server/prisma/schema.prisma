generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid()) @db.Uuid
  email                 String    @unique
  passwordHash          String    @map("password_hash")
  phone                 String?
  firstName             String    @map("first_name")
  lastName              String    @map("last_name")
  dataProcessingConsent Boolean   @map("data_processing_consent")
  emailVerified         Boolean   @default(false) @map("email_verified")
  verificationToken     String?   @map("verification_token")
  resetPasswordToken    String?   @map("reset_password_token")
  resetTokenExpires     DateTime? @map("reset_token_expires")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  profile           Profile?
  userRoles         UserRole[]
  testsCreated      Test[]             @relation("TestCreator")
  questionsCreated  Question[]         @relation("QuestionCreator")
  testAttempts      TestAttempt[]
  learningMaterials LearningMaterial[]

  @@map("users")
}

model Profile {
  id               String   @id @default(uuid()) @db.Uuid
  userId           String   @unique @map("user_id") @db.Uuid
  specializationId String   @map("specialization_id") @db.Uuid
  aboutMe          String?  @map("about_me") @db.Text
  specialistLevel  String?  @map("specialist_level")
  location         String?
  photoUrl         String?  @map("photo_url")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  user            User             @relation(fields: [userId], references: [id])
  specialization  Specialization   @relation(fields: [specializationId], references: [id])
  socialMedia     SocialMedia[]
  profileSkills   ProfileSkill[]
  projects        Project[]
  workExperiences WorkExperience[]
  educations      Education[]

  @@map("profiles")
}

model SocialMedia {
  id        String   @id @default(uuid()) @db.Uuid
  profileId String   @map("profile_id") @db.Uuid
  platform  String
  url       String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("social_media")
}

model Skill {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  category  String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profileSkills ProfileSkill[]

  @@map("skills")
}

model ProfileSkill {
  id        String   @id @default(uuid()) @db.Uuid
  profileId String   @map("profile_id") @db.Uuid
  skillId   String   @map("skill_id") @db.Uuid
  level     Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id])
  skill   Skill   @relation(fields: [skillId], references: [id])

  @@map("profile_skills")
}

model Project {
  id          String    @id @default(uuid()) @db.Uuid
  profileId   String    @map("profile_id") @db.Uuid
  title       String
  description String?   @db.Text
  startDate   DateTime? @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("projects")
}

model WorkExperience {
  id          String    @id @default(uuid()) @db.Uuid
  profileId   String    @map("profile_id") @db.Uuid
  company     String
  position    String
  description String?   @db.Text
  startDate   DateTime  @map("start_date") @db.Date
  endDate     DateTime? @map("end_date") @db.Date
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("work_experience")
}

model Education {
  id           String    @id @default(uuid()) @db.Uuid
  profileId    String    @map("profile_id") @db.Uuid
  institution  String
  degree       String
  fieldOfStudy String?   @map("field_of_study")
  startDate    DateTime  @map("start_date") @db.Date
  endDate      DateTime? @map("end_date") @db.Date
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("education")
}

model Specialization {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  profiles            Profile[]
  specializationTests SpecializationTest[]
  learningMaterials   LearningMaterial[]

  @@map("specializations")
}

model Role {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_roles")
}

model Test {
  id              String   @id @default(uuid()) @db.Uuid
  title           String
  description     String?  @db.Text
  durationMinutes Int?     @map("duration_minutes")
  createdById     String   @map("created_by") @db.Uuid
  isPublished     Boolean  @default(false) @map("is_published")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  createdBy           User                 @relation("TestCreator", fields: [createdById], references: [id])
  questions           Question[]
  specializationTests SpecializationTest[]
  testAttempts        TestAttempt[]

  @@map("tests")
}

model Question {
  id            String   @id @default(uuid()) @db.Uuid
  testId        String   @map("test_id") @db.Uuid
  content       String   @db.Text
  type          String
  correctAnswer String?  @map("correct_answer") @db.Text
  score         Int?
  createdById   String   @map("created_by") @db.Uuid
  isApproved    Boolean  @default(false) @map("is_approved")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  test          Test           @relation(fields: [testId], references: [id])
  createdBy     User           @relation("QuestionCreator", fields: [createdById], references: [id])
  answerOptions AnswerOption[]
  userAnswers   UserAnswer[]

  @@map("questions")
}

model AnswerOption {
  id         String   @id @default(uuid()) @db.Uuid
  questionId String   @map("question_id") @db.Uuid
  content    String   @db.Text
  isCorrect  Boolean  @map("is_correct")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  question    Question     @relation(fields: [questionId], references: [id])
  userAnswers UserAnswer[]

  @@map("answer_options")
}

model SpecializationTest {
  id               String   @id @default(uuid()) @db.Uuid
  specializationId String   @map("specialization_id") @db.Uuid
  testId           String   @map("test_id") @db.Uuid
  isRequired       Boolean  @default(false) @map("is_required")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  specialization Specialization @relation(fields: [specializationId], references: [id])
  test           Test           @relation(fields: [testId], references: [id])

  @@map("specialization_tests")
}

model TestAttempt {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  testId    String    @map("test_id") @db.Uuid
  startTime DateTime  @map("start_time")
  endTime   DateTime? @map("end_time")
  score     Float?
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  user        User         @relation(fields: [userId], references: [id])
  test        Test         @relation(fields: [testId], references: [id])
  userAnswers UserAnswer[]

  @@map("test_attempts")
}

model UserAnswer {
  id               String   @id @default(uuid()) @db.Uuid
  testAttemptId    String   @map("test_attempt_id") @db.Uuid
  questionId       String   @map("question_id") @db.Uuid
  selectedOptionId String?  @map("selected_option_id") @db.Uuid
  textAnswer       String?  @map("text_answer") @db.Text
  isCorrect        Boolean? @map("is_correct")
  scoreAwarded     Float?   @map("score_awarded")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  testAttempt    TestAttempt   @relation(fields: [testAttemptId], references: [id])
  question       Question      @relation(fields: [questionId], references: [id])
  selectedOption AnswerOption? @relation(fields: [selectedOptionId], references: [id])

  @@map("user_answers")
}

model LearningMaterial {
  id               String   @id @default(uuid()) @db.Uuid
  title            String
  content          String   @db.Text
  specializationId String   @map("specialization_id") @db.Uuid
  createdById      String   @map("created_by") @db.Uuid
  isPublished      Boolean  @default(false) @map("is_published")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  specialization Specialization @relation(fields: [specializationId], references: [id])
  createdBy      User           @relation(fields: [createdById], references: [id])

  @@map("learning_materials")
}
