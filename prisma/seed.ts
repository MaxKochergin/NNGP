import { PrismaClient, Skill } from '@prisma/client';
import * as bcrypt from 'bcrypt';
import { railwayConfig } from '../src/config/railway.config';

// –°–æ–∑–¥–∞–µ–º PrismaClient —Å fallback –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
const prisma = new PrismaClient({
  datasources: {
    db: {
      url: railwayConfig.DATABASE_URL,
    },
  },
});

async function main() {
  console.log('üå± –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...');
  console.log(
    'üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º DATABASE_URL:',
    railwayConfig.DATABASE_URL ? '–Ω–∞–π–¥–µ–Ω' : '–Ω–µ –Ω–∞–π–¥–µ–Ω',
  );

  // 1. –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏
  console.log('üìù –°–æ–∑–¥–∞–µ–º —Ä–æ–ª–∏...');
  let adminRole = await prisma.role.findFirst({ where: { name: 'admin' } });
  if (!adminRole) {
    adminRole = await prisma.role.create({
      data: {
      name: 'admin',
        description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã',
      },
    });
  }

  let employerRole = await prisma.role.findFirst({
    where: { name: 'employer' },
  });
  if (!employerRole) {
    employerRole = await prisma.role.create({
      data: {
        name: 'employer',
        description: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
      },
    });
  }

  let candidateRole = await prisma.role.findFirst({
    where: { name: 'candidate' },
  });
  if (!candidateRole) {
    candidateRole = await prisma.role.create({
      data: {
        name: 'candidate',
        description: '–ö–∞–Ω–¥–∏–¥–∞—Ç/–°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
      },
    });
  }

  let hrRole = await prisma.role.findFirst({ where: { name: 'hr' } });
  if (!hrRole) {
    hrRole = await prisma.role.create({
      data: {
        name: 'hr',
        description: 'HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
      },
    });
  }

  // 2. –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  console.log('üéØ –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
  let frontendSpec = await prisma.specialization.findFirst({
    where: { name: 'Frontend Developer' },
  });
  if (!frontendSpec) {
    frontendSpec = await prisma.specialization.create({
      data: {
        name: 'Frontend Developer',
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤',
      },
    });
  }

  let backendSpec = await prisma.specialization.findFirst({
    where: { name: 'Backend Developer' },
  });
  if (!backendSpec) {
    backendSpec = await prisma.specialization.create({
      data: {
        name: 'Backend Developer',
        description: '–°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ API',
      },
    });
  }

  let fullstackSpec = await prisma.specialization.findFirst({
    where: { name: 'Fullstack Developer' },
  });
  if (!fullstackSpec) {
    fullstackSpec = await prisma.specialization.create({
      data: {
        name: 'Fullstack Developer',
        description: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
      },
    });
  }

  // 3. –°–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫–∏
  console.log('üí™ –°–æ–∑–¥–∞–µ–º –Ω–∞–≤—ã–∫–∏...');
  const skills = [
    { name: 'JavaScript', category: 'Programming' },
    { name: 'TypeScript', category: 'Programming' },
    { name: 'React', category: 'Frontend' },
    { name: 'Vue.js', category: 'Frontend' },
    { name: 'Node.js', category: 'Backend' },
    { name: 'NestJS', category: 'Backend' },
    { name: 'PostgreSQL', category: 'Database' },
    { name: 'MongoDB', category: 'Database' },
    { name: 'Docker', category: 'DevOps' },
    { name: 'Git', category: 'Tools' },
  ];

  const createdSkills: Skill[] = [];
  for (const skill of skills) {
    let existingSkill = await prisma.skill.findFirst({
      where: { name: skill.name },
    });
    if (!existingSkill) {
      existingSkill = await prisma.skill.create({
        data: skill,
      });
    }
    createdSkills.push(existingSkill);
  }

  // 4. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üë• –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  const passwordHash = await bcrypt.hash('Password123', 10);

  const adminUser = await prisma.user.upsert({
    where: { email: 'admin@example.com' },
    update: {},
    create: {
      email: 'admin@example.com',
      passwordHash,
      firstName: '–ê–¥–º–∏–Ω',
      lastName: '–°–∏—Å—Ç–µ–º—ã',
      dataProcessingConsent: true,
      emailVerified: true,
    },
  });

  const mentorUser = await prisma.user.upsert({
    where: { email: 'hr@example.com' },
    update: {},
    create: {
      email: 'hr@example.com',
      passwordHash,
      firstName: '–ê–Ω–Ω–∞',
      lastName: 'HR-–º–µ–Ω–µ–¥–∂–µ—Ä',
      phone: '+7 (999) 123-45-67',
      dataProcessingConsent: true,
      emailVerified: true,
    },
  });

  const testUser = await prisma.user.upsert({
    where: { email: 'candidate@example.com' },
    update: {},
    create: {
      email: 'candidate@example.com',
      passwordHash,
      firstName: '–ü–µ—Ç—Ä',
      lastName: '–ö–∞–Ω–¥–∏–¥–∞—Ç',
      phone: '+7 (999) 987-65-43',
      dataProcessingConsent: true,
      emailVerified: true,
    },
  });

  const employerUser = await prisma.user.upsert({
    where: { email: 'employer@example.com' },
    update: {},
    create: {
      email: 'employer@example.com',
      passwordHash,
      firstName: '–ú–∏—Ö–∞–∏–ª',
      lastName: '–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å',
      phone: '+7 (999) 555-12-34',
      dataProcessingConsent: true,
      emailVerified: true,
    },
  });

  // 5. –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏
  console.log('üîê –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª–∏...');
  const adminUserRole = await prisma.userRole.findFirst({
    where: { userId: adminUser.id, roleId: adminRole.id },
  });
  if (!adminUserRole) {
    await prisma.userRole.create({
      data: {
        userId: adminUser.id,
        roleId: adminRole.id,
      },
    });
  }

  const mentorUserRole = await prisma.userRole.findFirst({
    where: { userId: mentorUser.id, roleId: hrRole.id },
  });
  if (!mentorUserRole) {
    await prisma.userRole.create({
      data: {
        userId: mentorUser.id,
        roleId: hrRole.id,
      },
    });
  }

  const testUserRole = await prisma.userRole.findFirst({
    where: { userId: testUser.id, roleId: candidateRole.id },
  });
  if (!testUserRole) {
    await prisma.userRole.create({
      data: {
        userId: testUser.id,
        roleId: candidateRole.id,
      },
    });
  }

  const employerUserRole = await prisma.userRole.findFirst({
    where: { userId: employerUser.id, roleId: employerRole.id },
  });
  if (!employerUserRole) {
    await prisma.userRole.create({
      data: {
        userId: employerUser.id,
        roleId: employerRole.id,
      },
    });
  }

  // 6. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
  console.log('üìã –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏...');
  const mentorProfile = await prisma.profile.upsert({
    where: { userId: mentorUser.id },
    update: {},
    create: {
      userId: mentorUser.id,
      specializationId: fullstackSpec.id,
      aboutMe: '–û–ø—ã—Ç–Ω—ã–π fullstack —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 5+ –≥–æ–¥–∞–º–∏ –æ–ø—ã—Ç–∞',
      specialistLevel: 'Senior',
      location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    },
  });

  const userProfile = await prisma.profile.upsert({
    where: { userId: testUser.id },
    update: {},
    create: {
      userId: testUser.id,
      specializationId: frontendSpec.id,
      aboutMe: 'Junior frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, –∏–∑—É—á–∞—é React',
      specialistLevel: 'Junior',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
    },
  });

  // 7. –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º
  console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤—ã–∫–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—è–º...');
  const mentorSkills = [
    { skillName: 'JavaScript', level: 9 },
    { skillName: 'TypeScript', level: 8 },
    { skillName: 'React', level: 9 },
    { skillName: 'Node.js', level: 8 },
    { skillName: 'NestJS', level: 7 },
    { skillName: 'PostgreSQL', level: 8 },
  ];

  for (const skillData of mentorSkills) {
    const skill = createdSkills.find((s) => s.name === skillData.skillName);
    if (skill) {
      const existingProfileSkill = await prisma.profileSkill.findFirst({
        where: {
          profileId: mentorProfile.id,
          skillId: skill.id,
        },
      });
      if (!existingProfileSkill) {
        await prisma.profileSkill.create({
          data: {
            profileId: mentorProfile.id,
            skillId: skill.id,
            level: skillData.level,
          },
        });
      }
    }
  }

  // 8. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
  console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã...');
  let jsTest = await prisma.test.findFirst({
    where: { title: 'JavaScript –û—Å–Ω–æ–≤—ã' },
  });
  if (!jsTest) {
    jsTest = await prisma.test.create({
      data: {
        title: 'JavaScript –û—Å–Ω–æ–≤—ã',
        description: '–¢–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤ JavaScript',
        durationMinutes: 30,
        createdById: mentorUser.id,
        isPublished: true,
      },
    });
  }

  // 9. –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
  console.log('‚ùì –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã...');
  let question1 = await prisma.question.findFirst({
    where: {
      testId: jsTest.id,
      content: '–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç console.log(typeof null)?',
    },
  });
  if (!question1) {
    question1 = await prisma.question.create({
      data: {
        testId: jsTest.id,
        content: '–ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç console.log(typeof null)?',
        type: 'multiple_choice',
        correctAnswer: 'object',
        score: 10,
        createdById: mentorUser.id,
        isApproved: true,
      },
    });

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 1
    await prisma.answerOption.createMany({
      data: [
        { questionId: question1.id, content: 'null', isCorrect: false },
        { questionId: question1.id, content: 'object', isCorrect: true },
        { questionId: question1.id, content: 'undefined', isCorrect: false },
        { questionId: question1.id, content: 'string', isCorrect: false },
      ],
    });
  }

  let question2 = await prisma.question.findFirst({
    where: {
      testId: jsTest.id,
      content:
        '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞?',
    },
  });
  if (!question2) {
    question2 = await prisma.question.create({
      data: {
        testId: jsTest.id,
        content:
          '–ö–∞–∫–æ–π –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞?',
        type: 'multiple_choice',
        correctAnswer: 'push',
        score: 10,
        createdById: mentorUser.id,
        isApproved: true,
      },
    });

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ 2
    await prisma.answerOption.createMany({
      data: [
        { questionId: question2.id, content: 'push()', isCorrect: true },
        { questionId: question2.id, content: 'pop()', isCorrect: false },
        { questionId: question2.id, content: 'shift()', isCorrect: false },
        { questionId: question2.id, content: 'unshift()', isCorrect: false },
      ],
    });
  }

  // 10. –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
  console.log('üîó –°–≤—è–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...');
  const existingSpecTest = await prisma.specializationTest.findFirst({
    where: {
      specializationId: frontendSpec.id,
      testId: jsTest.id,
    },
  });
  if (!existingSpecTest) {
    await prisma.specializationTest.create({
      data: {
        specializationId: frontendSpec.id,
        testId: jsTest.id,
        isRequired: true,
      },
    });
  }

  // 11. –°–æ–∑–¥–∞–µ–º —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  console.log('üìö –°–æ–∑–¥–∞–µ–º —É—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...');
  let learningMaterial = await prisma.learningMaterial.findFirst({
    where: { title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript' },
  });
  if (!learningMaterial) {
    learningMaterial = await prisma.learningMaterial.create({
      data: {
        title: '–í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript',
        content: `# –í–≤–µ–¥–µ–Ω–∏–µ –≤ JavaScript

JavaScript - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.

## –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏:
- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
- –§—É–Ω–∫—Ü–∏–∏
- –û–±—ä–µ–∫—Ç—ã –∏ –º–∞—Å—Å–∏–≤—ã
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ

## –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:
\`\`\`javascript
const greeting = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!";
console.log(greeting);
\`\`\``,
        specializationId: frontendSpec.id,
        createdById: mentorUser.id,
        isPublished: true,
      },
    });
  }

  console.log('‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:');
  console.log('- 4 —Ä–æ–ª–∏ (admin, employer, candidate, hr)');
  console.log('- 3 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (Frontend, Backend, Fullstack)');
  console.log('- 10 –Ω–∞–≤—ã–∫–æ–≤');
  console.log('- 4 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  console.log('- 2 –ø—Ä–æ—Ñ–∏–ª—è');
  console.log('- 1 —Ç–µ—Å—Ç —Å 2 –≤–æ–ø—Ä–æ—Å–∞–º–∏');
  console.log('- 1 —É—á–µ–±–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª');
  console.log('');
  console.log('üîë –¢–µ—Å—Ç–æ–≤—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã:');
  console.log('- admin@example.com / Password123 (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)');
  console.log('- hr@example.com / Password123 (HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)');
  console.log('- candidate@example.com / Password123 (–ö–∞–Ω–¥–∏–¥–∞—Ç)');
  console.log('- employer@example.com / Password123 (–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å)');
}

main()
  .catch((e) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –ë–î:', e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
